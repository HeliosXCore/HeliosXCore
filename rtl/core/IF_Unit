`include "consts/Consts.vh"
`include "consts/ALU.vh"

module IF_Unit (
    input wire 			  clk,
    input wire 			  reset,
    input wire [`ADDR_LEN-1:0] pc,
    input wire [4*`INSN_LEN-1:0] idata,

    output wire [`ADDR_LEN-1:0] npc,
    output wire [`INSN_LEN-1:0] inst1
    //output wire [`INSN_LEN-1:0] inst2,
    //output wire 		invalid2_pipe

);

    reg [`ADDR_LEN-1:0] npc_if;
    reg [`ADDR_LEN-1:0] pc_if;
    reg [`INSN_LEN-1:0] inst1_if;
    //reg [`INSN_LEN-1:0] inst2_if;
    //reg 			    inv1_if;
    //reg 			    inv2_if;

    wire  stall_IF;
    wire  kill_IF;
    wire  stall_ID;
    wire  kill_ID;
    wire  stall_DP;
    wire  kill_DP;

    assign stall_IF = stall_ID | stall_DP;
    //assign kill_IF = prmiss;
   
   always @ (posedge clk) begin
      if (reset) begin
	 pc <= `ENTRY_POINT;
//     end else if (prmiss) begin
//	 pc <= jmpaddr;
      end else if (stall_IF) begin
	 pc <= pc;
      end else begin
	 pc <= npc;
      end
   end

   pipeline_IF pipeline_if(
		       .clk(clk),
		       .reset(reset),
		       .pc(pc),
		       .npc(npc),
		       .inst1(inst1),
//		       .inst2(inst2),
//		       .invalid2(invalid2_pipe),
		       .idata(idata)
		       );

   always @ (posedge clk) begin
      if (reset | kill_IF) begin
	 npc_if <= 0;
	 pc_if <= 0;
	 inst1_if <= 0;
//	 inst2_if <= 0;
//	 inv1_if <= 1;
//	 inv2_if <= 1;
	 
      end else if (~stall_IF) begin
	 npc_if <= npc;
	 pc_if <= pc;
	 inst1_if <= inst1;
//	 inst2_if <= inst2;
//	 inv1_if <= 0;
//	 inv2_if <= invalid2_pipe;
	 
      end
   end // always @ (posedge clk)

endmodule
